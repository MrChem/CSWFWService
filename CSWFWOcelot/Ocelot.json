{
  // 转发路由，数组中的每个元素都是某个服务的一组路由转发规则
  "Routes": [
    {
      "ServiceName": "CSUser",
      // Uri方案，http、https
      "DownstreamScheme": "http",
      // 下游（服务提供方）服务路由模板
      "DownstreamPathTemplate": "/api/{url}",
      // 上游（客户端，服务消费方）请求路由模板
      "UpstreamPathTemplate": "/cs/{url}",
      "UpstreamHttpMethod": [ "Get", "Post" ],
      "LoadBalancerOptions": {
        "Type": "RoundRobin" //轮询     
      }
     // "UseServiceDiscovery": true
    }
  ],
  // 全局配置，此节点的配置会覆盖ReRoutes，可以在这里设置一些通用的配置
  "GlobalConfiguration": {

    //"ReRouteIsCaseSensitive": false,
    "ServiceDiscoveryProvider": {
      "Host": "127.0.0.1",
      "Port": 8500,
      "Type": "Consul" //由Consul提供服务发现
    }
  }

  //"Routes": [
  //  {
  //    // 下游（服务提供方）服务路由模板
  //    "DownstreamPathTemplate": "/{path}",
  //    // Uri方案，http、https
  //    "DownstreamScheme": "http",
  //    // 服务地址和端口，如果是集群就设置多个
  //    "DownstreamHostAndPorts": [
  //      {
  //        "Host": "127.0.0.1",
  //        "Port": 5101
  //      }
  //    ],
  //    // 允许的HTTP请求方法，可以写多个
  //    "UpstreamHttpMethod": [ "Get", "Post" ],
  //    // 上游（客户端，服务消费方）请求路由模板
  //    "UpstreamPathTemplate": "/{path}"
  //    // 负载均衡，只有上面匹配了集群，才有效
  //    /*
  //     负载均衡算法，总共三种类型。
  //      LeastConnection：最小链接，将请求发往最空闲的那个服务器
  //      RoundRobin：轮询，轮流发送
  //      NoLoadBalance：无负载均衡，总是发往第一个请求或者是服务发现
  //      */
  //    //"LoadBalancerOptions": {
  //    //  "Type": "RoundRobin" // 轮询
  //    //}
  //  }
  //],
  //// 全局配置，此节点的配置会覆盖Routes，可以在这里设置一些通用的配置
  //"GlobalConfiguration": {
  //  "BaseUrl": "http://localhost:5155",
  //  "ReRouteIsCaseSensitive": false // 路由是否区分大小写

  //}


}